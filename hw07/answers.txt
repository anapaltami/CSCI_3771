#1 What is wrong with the following code and how would you fix it?
   #ifndef PROJECTILE_H
   #define PROJECTILE_H
   class Projectile {
   private:
   	double position;
   	double velocity;
   public:
   	Projectile(double position, double velocity);
   	virtual ËœProjectile();
   	double getPosition() const;
   	double getVelocity() const;
   } // end of Projecile class
   #endif
	Private variables aren't initialized. Default/blank constructor hasn't been added.

#2 The following is the definition of the constructor for the Projectile class above, but there are three things wrong with it. What are they and how would you fix them?
   Projectile(int position, int velocity) {
   	this.position = position;
   	this.velocity = velocity;
   } // end of constructor
	Change to this->position = position; and this->velocity = velocity;. Also method should have Projectile::Projectile in the .cc file.

#3 Describe each of the following methods
   a) int* method(int* arg);
	Returns a pointer to an int and the method takes a pointer to an int as an argument.
   b) const int* method(int* arg);
	Takes a pointer to an int as an argument, returns a pointer to an int, the return type cannot be changed.
   c) const int* const method(int* arg);
	Takes a pointer to an int as an argument, returns a pointer to an int, the return type and data cannot be changed.
   d) const int* const method(const int* arg);
	Takes a pointer to a const int as an argument, returns a pointer to a const int and the return data and type cannot be changed.
   e) const int* const method(const int* arg) const;
	Takes a pointer to a const int as an argument, returns a pointer to a const in and the return data and type cannot be changed, object also cannot be changed.

#5 What is the difference between a pointer and a reference?
	A pointer can point to a value and its place in memory, a reference only points to the place in memory.

#10 Why would you never declare a method like this?
   void method(const int value);
	While the method may be able to take const data as an argument, there is no guarantee that the method itself will not modify the data once it has been passed.
